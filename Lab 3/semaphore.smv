MODULE user(semaphore, active)
VAR
  state : { idle, entering, critical, exiting };
ASSIGN
  init(state) := idle;
  next(state) := case
    active & state = idle : { idle, entering };
    active & state = entering & !semaphore : critical;
    active & state = critical : { critical, exiting };
    active & state = exiting : idle;
    TRUE : state;
  esac;

MODULE main
VAR
  semaphore : boolean;
  VAR running: 0..1;
  proc1 : user(semaphore, next(running) = 0);
  proc2 : user(semaphore, next(running) = 1);
ASSIGN
  init(semaphore) := FALSE;

  next(semaphore) := case
    next(running) = 0 & !semaphore & proc1.state = entering: TRUE;
	next(running) = 1 & !semaphore & proc2.state = entering: TRUE;
    next(running) = 0 & semaphore & proc1.state = exiting : FALSE;
	next(running) = 1 & semaphore & proc2.state = exiting : FALSE;
    TRUE : semaphore;
  esac;

DEFINE
	empty := proc1.state != entering & proc2.state != entering;

FAIRNESS
  empty;

SPEC AG !(proc1.state = critical & proc2.state = critical); -- safety

SPEC AG (proc1.state = entering -> AF proc1.state = critical); -- liveness
SPEC AG (proc2.state = entering -> AF proc2.state = critical); -- liveness

-- FAILED TRACE WITHOUT FAIRNESS ENABLED
-- Trace Description: CTL Counterexample 
-- Trace Type: Counterexample 
--   -> State: 2.1 <-
--     semaphore = FALSE
--     running = 0
--     proc1.state = idle
--     proc2.state = idle
--     empty = TRUE
--   -> State: 2.2 <-
--     running = 1
--     proc2.state = entering
--     empty = FALSE
--   -- Loop starts here
--   -> State: 2.3 <-
--     running = 0
--   -> State: 2.4 <-

-- Problem: Process 1 (proc2) is in entry section but never enters critical section because it never runs anymore