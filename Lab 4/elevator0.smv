---------------------------------------------------------------------------
-- AN ELEVATOR CONTROLLER                                                --
---------------------------------------------------------------------------

-- Original example by Alessandra Giordani from the University of Trento.
-- This SMV program describes an elevator system for a 3-floors building.
-- It includes modules both for the physical system (reservation buttons,
-- cabin, door), and for the controller.

---------------------------------------------------------------------------
-- BUTTON                                                                --
---------------------------------------------------------------------------

-- For each floor there is a button to request service, that can be
-- pressed. A pressed button stays pressed unless reset by the
-- controller. A button that is not pressed can become pressed
-- nondeterministically.

MODULE Button(reset, earthquake, access)
  VAR
    pressed : boolean;
  ASSIGN
    init(pressed) := FALSE;
    next(pressed) :=
      case
        pressed & reset  : FALSE;
        pressed & !reset : TRUE;
        !earthquake & access & !pressed         : {FALSE,TRUE};
		TRUE: pressed;
      esac;

  -- REQ: The controller must not reset a button that is not pressed.
  SPEC AG(pressed | !reset)
  -- REQ: No button can reach a state where it remains pressed forever.
  SPEC AG(pressed -> AF(!pressed))

  -- REQ: access property does not change over time
  SPEC AG(access -> AX(access) & !access -> AX(!access))

  -- REQ: I earthquake ignore pressed buttons
  SPEC AG(earthquake & !pressed -> AX(!pressed))

---------------------------------------------------------------------------
-- CABIN                                                                 --
---------------------------------------------------------------------------

-- The cabin can be at any floor between 1 and 3. It is equipped with an
-- engine that has a direction of motion, that can be either stopped, up
-- or down.

MODULE Cabin(direction)
  DEFINE N:=3;

  VAR
    floor     : 1..N;

  ASSIGN
    next(floor) :=
      case
        next(direction) = stop : floor;
        next(direction) = up   : case
          floor = 1:2;
          floor = 2:3;
          TRUE:floor;
                                 esac;
        next(direction) = down : case
		  floor = 3:2;
          floor = 2:1;
          TRUE:floor;
                                 esac;
      esac;

  -- REQ: The cabin can move up only if the floor is not N.
  SPEC AG(floor = N -> AX(direction != up))

-- REQ: The cabin can move down only if the floor is not 1.
  SPEC AG(floor = 1 -> AX(direction != down))




---------------------------------------------------------------------------
-- DOOR                                                                  --
---------------------------------------------------------------------------

-- The cabin is also equipped with a door, that can be either open
-- or closed. The door can receive either open, close or nop commands
-- from the controller, and it responds opening, closing, or
-- preserving the current state.

MODULE Door(door_cmd)
  VAR
    status : { open, closed };

  ASSIGN
    next(status) :=
      case
        door_cmd = open      : open;
        door_cmd = close     : closed;
        door_cmd = nop       : status;
      esac;

  -- REQ: The controller can issue an open command only if the door is closed.
  SPEC AG(status = close -> AX(door_cmd != close))

  -- REQ: The controller can issue a close command only if the door is open.
  SPEC AG(status = open -> AX(door_cmd != open))



---------------------------------------------------------------------------
-- CONTROLLER                                                            --
---------------------------------------------------------------------------

-- The controller takes in input (as sensory signals) the floor and the
-- direction of motion of the cabin, the status of the door, and the
-- status of the four buttons. It decides the controls to the engine, to
-- the door and to the buttons.

MODULE CTRL(floor, door, pressed_1, pressed_2, pressed_3, access_1, access_2, access_3, pressed_2_up, pressed_2_down)
  VAR
    direction : {up, down, stop};
    door_cmd : {open, close, nop};
    reset_1 : boolean;
    reset_2 : boolean;
	reset_2_up : boolean;
	reset_2_down : boolean;
    reset_3 : boolean;
	served_1 : boolean;
	served_2 : boolean;
	served_3 : boolean;
	earthquake : boolean;
	repair : boolean;

  -- Button N is reset only if it is pressed, we are at floor N, and
  -- the door is open.
  ASSIGN
    reset_1 := (pressed_1 & (floor = 1 & door = open | earthquake));
    reset_2 := (pressed_2 & (floor = 2 & door = open | earthquake));
	reset_2_up := (pressed_2_up & (floor = 2 & door = open & (last_dir = up | !pending_down) | earthquake));
	reset_2_down := (pressed_2_down & (floor = 2 & door = open & (last_dir = down | !pending_up)  | earthquake));
    reset_3 := (pressed_3 & (floor = 3 & door = open | earthquake));

	served_1 := (floor = 1 & door_cmd = open);
	served_2 := (floor = 2 & door_cmd = open);
	served_3 := (floor = 3 & door_cmd = open);

  -- Check whether there are pending requests at the current floor,
  -- at a higher floor, and at a lower floor.
  DEFINE
    pending_here := (floor = 1 & pressed_1) | (floor = 2 & pressed_2) |
                    (floor = 3 & pressed_3);

    -- True if a directional request is made for the current floor and shall be fulfilled
	pending_here_dir := (floor = 2 & pressed_2_up & (direction = up | !pending_down))
					      | (floor = 2 & pressed_2_down & (direction = down | !pending_up));

    pending_up   := (floor = 1 & (pressed_2 | pressed_2_up | pressed_2_down | pressed_3)) |
                    (floor = 2 & pressed_3);

    pending_down := (floor = 3 & (pressed_1 | pressed_2 | pressed_2_up | pressed_2_down)) |
                    (floor = 2 & pressed_1);
	
	-- pending_2_up := 

  -- * If the cabin is moving, do not send commands to the door.
  -- * If there is a pending request at the current floor and
  --   the door is closed, open it.
  -- * If there are pending requests at different floors and the
  --   door is open, close it.
  -- * Otherwise, do not send commands to the door.
  ASSIGN
	next(door_cmd) :=
      case
	  -- open if request shall be fulfilled and door closed and cabin does not move
      (pending_here | pending_here_dir) & door = closed & next(direction) = stop: open;
	  -- emergency opening of the door
	  earthquake & next(direction) = stop & door != open: open;
	  !earthquake & (pending_up | pending_down) & door = open & !repair & next(direction) = stop: close;
      TRUE: nop;
      esac;

  -- Variable "last_dir" records the last movement direction of the cabin.
  VAR
    last_dir : {up,down};
  ASSIGN
    next(last_dir) :=
      case
        direction = stop : last_dir;
        TRUE             : direction;
      esac;

  -- * If the door is open, do not send move commands to the cabin.
  -- * If there is a pending request at the current floor
  --   and the cabin is moving, stop it.
  -- * If there are pending requests both at higher and at lower floors,
  --   keep moving in "last_dir".
  -- * If there are pending requests at higher (lower) floors,
  --   move up (down).
  -- * Otherwise, do not send commands to the cabin.
  ASSIGN
    init(direction) := stop;
    next(direction) :=
      case
	  -- move upwards if no earthquake, door closed request upstairs
	  -- AND no request on current floor or request already fulfilled (someone spamming the button on this floor)
	  -- AND does not invert direction of movement and no requst downstairs or already moving upwards
	  !earthquake & next(door) = closed & pending_up
	    & ((!pending_here & !pending_here_dir) | direction = stop)
	    & direction != down & (!pending_down | last_dir = up): up;
      
	  -- move downwards if no earthquake, door closed and request downstairs
	  -- AND no request on current floor or request already fulfilled (someone spamming the button on this floor)
	  -- AND does not invert direction of movement and no requst upstairs or already moving downwards
	  !earthquake & next(door) = closed & pending_down
	    & ((!pending_here & !pending_here_dir) | direction = stop)
	    & direction != up & (!pending_up | last_dir = down): down;
      
	  TRUE: stop;
      esac;
	
	next(earthquake) := case
	  earthquake & !repair: TRUE;
	  earthquake & repair: FALSE;
	  TRUE: {TRUE, FALSE};
	  esac;
	
	init(repair) := FALSE;
	next(repair) := case
	  !repair & earthquake & door_cmd != close & door = open: TRUE;
	  TRUE: FALSE;
	  esac;
	  

  -- The cabin needs to stop before it can change direction.
  SPEC AG(direction = up -> AX(direction != down))
  SPEC AG(direction = down -> AX(direction != up))

  -- REQ: No pressed button can be reset until the cabin stops at the
  --      corresponding floor and opens the door.
  SPEC AG((pressed_1 & AX !pressed_1) -> (door = open & floor = 1) | earthquake)
  SPEC AG((pressed_2 & AX !pressed_2) -> (door = open & floor = 2) | earthquake)
  SPEC AG((pressed_2_up & AX !pressed_2_up) -> (door = open & floor = 2) | earthquake)
  SPEC AG((pressed_2_down & AX !pressed_2_down) -> (door = open & floor = 2) | earthquake)
  SPEC AG((pressed_3 & AX !pressed_3) -> (door = open & floor = 3) | earthquake)

  -- REQ: A button must be reset as soon as the cabin stops at the
  --      corresponding floor with the door open.
  SPEC AG(door = open & floor = 1 & pressed_1 -> AX(!pressed_1))
  SPEC AG(door = open & floor = 2 & pressed_2 -> AX(!pressed_2))
  SPEC AG(door = open & floor = 2 & pressed_2_up & (last_dir = up | !pending_down) -> AX(!pressed_2_up))
  SPEC AG(door = open & floor = 2 & pressed_2_down & (last_dir = down | !pending_up)  -> AX(!pressed_2_down))
  SPEC AG(door = open & floor = 3 & pressed_3 -> AX(!pressed_3))

  -- REQ: The cabin can move only when the door is closed.
  SPEC AG(door = open -> direction = stop)

  -- REQ: If no button is pressed, the controller must issue no commands
  --      and the cabin must be stopped.
  SPEC AG(!pressed_1 & !pressed_2 & !pressed_2_up & !pressed_2_down & !pressed_3 -> direction = stop)

  -- REQ: Each floor is only served if access is enabled, or if the elevator happens to start at that floor.
  -- Exception: earthquake
  SPEC AG((!access_1 -> AX(!served_1)) | earthquake)
  SPEC AG((!access_2 -> AX(!served_2)) | earthquake)
  SPEC AG((!access_3 -> AX(!served_3)) | earthquake)

  -- REQ: If earthquake stop and open door at the next floor
  SPEC AG(earthquake -> A[AX(direction = stop) U (!earthquake & !repair)])

  -- REQ: If earthquake open door in small number of transitions
  LTLSPEC G(earthquake -> F[1,3](door = open))

  -- REQ: If earthquake and door opened, door stays opened until repaired
  SPEC AG(earthquake & door_cmd = open -> A[AX(door = open) U (!earthquake & !repair)])

  -- REQ: If earthquake, earthquake stays until repair
  SPEC AG(earthquake -> A[earthquake U repair])

  -- REQ: If earthquake, repair will eventually arrive
  SPEC AG(earthquake -> AF(repair))

---------------------------------------------------------------------------
-- MAIN                                                                  --
---------------------------------------------------------------------------

-- The main module shows the connection between modules.

MODULE main
  VAR
    cabin : Cabin(ctrl.direction);
    door  : Door(ctrl.door_cmd);
    button_1 : Button(ctrl.reset_1, ctrl.earthquake, floor1_access);
    button_2 : Button(ctrl.reset_2, ctrl.earthquake, floor2_access);
	button_2_up : Button(ctrl.reset_2_up, ctrl.earthquake, floor2_access);
	button_2_down : Button(ctrl.reset_2_down, ctrl.earthquake, floor2_access);
    button_3 : Button(ctrl.reset_3, ctrl.earthquake, floor3_access);
    ctrl : CTRL(cabin.floor, door.status,
                button_1.pressed, button_2.pressed,
                button_3.pressed, button_1.access,
				button_2.access, button_3.access, 
				button_2_up.pressed, button_2_down.pressed);
	floor1_access : boolean;
	floor2_access : boolean;
	floor3_access : boolean;

ASSIGN
	next(floor1_access) := floor1_access;
	next(floor2_access) := floor2_access;
	next(floor3_access) := floor3_access;

  -- Make sure all the floor 2 buttons have the same access permissions because it makes no sense otherwise
  -- Moved the access properties to the main module for that reason
  SPEC AG(button_2.access = button_2_down.access & button_2.access = button_2_up.access)


  -- COUNTEREXAMPE FOR INCORRECT PROPERTY
